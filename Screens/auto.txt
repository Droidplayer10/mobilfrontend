import { StatusBar } from 'expo-status-bar';
import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  ActivityIndicator,
  FlatList,
  Text,
  View,
  Image,
  TouchableOpacity,
  ImageBackground,
  Linking,
  Button,
  TextInput,
  Alert
} from 'react-native';

const IP = require('./ipcim');
const image = {
  uri: 'https://media.istockphoto.com/id/1297855347/photo/white-plane-on-the-blue-runway-top-view-and-white-background-minimal-idea-concept-aircraft.jpg?b=1&s=170667a&w=0&k=20&c=nfSPqWMIMk_nhNDgz7Lk3uorrOAdGwQ4K2sBHYpXsxA='
};

const App = () => {
  const [data, setData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [datum, setDatum] = useState("");
  const [nap, setNap] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(IP.ipcim + 'kolcsonzes');
        const jsonData = await response.json();
        setData(jsonData);
      } catch (error) {
        console.log(error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, []);

  const szavazat = async (szam) => {
    var adatok = {
      bevitel1: szam
    }
    Alert.alert(adatok.bevitel1);
    const response = await fetch(IP.ipcim + 'szavazat', {
      method: "POST",
      body: JSON.stringify(adatok),
      headers: { "Content-type": "application/json; charset=UTF-8" }
    });
    const text = await response.text();
    console.log(text)
  }

  const gombok = async (gomb) => {
    var adatok = {
      button_i: gomb
    }
    Alert.alert(adatok.button_i);
    const response = await fetch(IP.ipcim + 'auto_adatok', {
      method: "POST",
      body: JSON.stringify(adatok),
      headers: { "Content-type": "application/json; charset=UTF-8" }
    });
    const text = await response.text();
    console.log(text)
  }

  const evjarat = async (ev) => {
    var datumok = {
      datum: ev
    }
    Alert.alert(datumok.datum);
    const response = await fetch(IP.ipcim + 'auto_evjarat', {
      method: "POST",
      body: JSON.stringify(datumok),
      headers: { "Content-type": "application/json; charset=UTF-8" }
    });
    const text = await response.text();
    console.log(text)
  }

  const atalakit = (parameter) => {
    var kecske = parameter.split('T')
    return (kecske[0])
  }

  const renderItem = ({ item }) => (
    <View style={{ backgroundColor: 'black', marginBottom: 5 }}>
  
  <ImageBackground source={image} resizeMode="cover" style={styles.image}>
              <Text style={{fontSize:20,color:'#68BBE3',textAlign:'left'}}>
                {item.auto_nev}
                </Text>

                <Text style={{fontSize:20,color:'white',textAlign:'right',marginRight:10}}>
                { this.atalakit(   item.kolcsonzes_datum)}
                </Text>
              

  
                <TouchableOpacity
          style={styles.button_i}
          onPress={async ()=>this.szavazat(item.auto_adatok)}
        >
          <Text style={{color:'black',fontSize:15}}>i</Text>
          
        </TouchableOpacity>   

              <Image   source={{uri:'http://192.168.6.7:3000/'+item.auto_kep}} style={{width:230,height:170,alignSelf:'left',transform:[{rotate:'328deg'}]}}   />
              
              <Text style={{fontSize:20,color:'black',textAlign:'left'}}>
                Az ár {item.kolcsonzes_nap} napra:
              </Text>
              <Text style={{fontSize:18,color:'black',textAlign:'Left'}}>
                {item.auto_ar}
                </Text>
                { item.auto_akcio==''    ? 
              null
              :   <View>
              <Text style={{fontSize:15,backgroundColor:'#FFBF00',textAlign:'center',}}>Akciós ár :</Text>
                <Text style={{fontSize:20,backgroundColor:'#FFBF00',textAlign:'center'}}>{item.auto_akcios_ar}</Text>
                </View>
              }
              
                <Text style={{fontSize:20,color:'black',textAlign:'right'}}>
                {item.auto_akcios_ar}
                </Text>

              <Text style={{fontSize:15,color:'black',textAlign:'center'}}>
              A kölcsönzött telefonszáma: +36{item.kolcsonzes_telefon}
              </Text>
              
              <TouchableOpacity
          style={styles.button}
          onPress={async ()=>this.szavazat(item.auto_nev)}
        >
          <Text style={{fontStyle:"italic",color:'white',fontSize:20}}>Foglalás</Text>
          
        </TouchableOpacity>   


    </ImageBackground>

    </View>

    
)

return(

    <View style={styles.container}>

<TextInput
style={styles.input}
value={datum}
onChangeText={setDatum}
placeholder="Dátum (yyyy-mm-dd)"
/>

<TextInput
style={styles.input}
value={nap}
onChangeText={setNap}
placeholder="Nap"
/>

<Button
title="Keresés"
onPress={async () => {
setIsLoading(true);
try {
const response = await fetch(${IP.ipcim}kolcsonzes?datum=${datum}&nap=${nap});
const json = await response.json();
setData(json);
} catch (error) {
console.error(error);
} finally {
setIsLoading(false);
}
}}
/>

{isLoading ? (
<View style={[styles.container, styles.horizontal]}>
<ActivityIndicator size="large" color="#0000ff" />
</View>
) : (
<FlatList
data={data}
renderItem={renderItem}
keyExtractor={(item) => item.auto_id.toString()}
/>
)}

<View style={styles.buttons}>
<TouchableOpacity style={styles.button_i} onPress={() => szavazat(1)}>
<Text style={styles.countText}>1</Text>
</TouchableOpacity>
<TouchableOpacity style={styles.button_i} onPress={() => szavazat(2)}>
<Text style={styles.countText}>2</Text>
</TouchableOpacity>

<TouchableOpacity style={styles.button_i} onPress={() => szavazat(3)}>
<Text style={styles.countText}>3</Text>
</TouchableOpacity>

<TouchableOpacity style={styles.button_i} onPress={() => gombok('fel')}>
<Text style={styles.countText}>+</Text>
</TouchableOpacity>

<TouchableOpacity style={styles.button_i} onPress={() => gombok('le')}>
<Text style={styles.countText}>-</Text>
</TouchableOpacity>

<TextInput
style={styles.input}
value={datum}
onChangeText={setDatum}
placeholder="Dátum (yyyy-mm-dd)"
/>

<Button
title="Keresés"
onPress={async () => {
setIsLoading(true);
try {
const response = await fetch(${IP.ipcim}kolcsonzes?datum=${datum}&nap=${nap});
const json = await response.json();
setData(json);
} catch (error) {
console.error(error);
} finally {
setIsLoading(false);
}
}}
/>

{isLoading ? (
<View style={[styles.container, styles.horizontal]}>
<ActivityIndicator size="large" color="#0000ff" />
</View>
) : (
<FlatList
data={data}
renderItem={renderItem}
keyExtractor={(item) => item.auto_id.toString()}
/>
)}

<View style={styles.buttons}>
<TouchableOpacity style={styles.button_i} onPress={() => szavazat(1)}>
<Text style={styles.countText}>1</Text>
</TouchableOpacity>
<TouchableOpacity style={styles.button_i} onPress={() => szavazat(2)}>
<Text style={styles.countText}>2</Text>
</TouchableOpacity>

<TouchableOpacity style={styles.button_i} onPress={() => szavazat(3)}>
<Text style={styles.countText}>3</Text>
</TouchableOpacity>

<TouchableOpacity style={styles.button_i} onPress={() => gombok('fel')}>
<Text style={styles.countText}>+</Text>
</TouchableOpacity>

<TouchableOpacity style={styles.button_i} onPress={() => gombok('le')}>
<Text style={styles.countText}>-</Text>
</TouchableOpacity>
</View>

</View>




)


}
